#!/bin/bash
hw=${PWD##*/}
parent=${PWD%/*/*} # TODO not sure why I ha to add this opposed to using ~ 
                   # instead but it works.

writeusage () {
    echo
    echo "      tester - UCSD CSE30"
    echo "      Makes and tests your program simultaneously with the sample program."
    echo "      The differences in stdout/stderr are shown in a vimdiff."
    echo
    echo "      Usage: tester [program] [solution program] [filename]"
    echo
    echo "      Be sure to run this in a \"pa#\" directory."
    echo
}

# If the user doesn't know how to use this
if [[ "$#" < 3 ]]; then
    writeusage
    exit 1
fi


# First arg is the driver
driver="$1"
my_prog="./$driver"
shift

# Second arg is solution driver name
soldriver="$1"
sample_prog="$parent/public/$soldriver"
shift

#Third arg is the text file
input="$1"
shift

# Make your file
# This makes the default target
if !make;then
    echo "      **********************************************"
    echo "      *        Make failed!! Exiting script.       *"
    echo "      **********************************************"
    echo "                    ~Sorry Dude :( ~"

    #Quit script
    exit 1
fi

# Remove old output files
rm -f mine sol

count=0	      # Count the number of tests performed
passedCount=0 # Count the number of tests passed
OLD_IFS=$IFS  # Save the delimiter
IFS=$'\n'     # Make the delimiter a newline

# Get lines from file
for line in $(cat $input)
do
    # Reset delimiter 
    IFS=$OLD_IFS

    let count++
    count_msg="TEST: $count\n"
    echo $count_msg

    # number test in file to make the results easer to understend
    echo $count_msg >> mine
    echo $count_msg >> sol

    # Read arguments
    args=""
    for num in $line; do
        args="$args $num"
    done

    # Create output file taking in stderr & stdout
    echo "      Attempting to run $my_prog$args ..."
    $my_prog$args >> mine 2>&1 \
        && echo "      Running $my_prog$args...\n"

    # Save solution output
    echo "      Attempting to run $sample_prog $args..."
    $sample_prog$args >> sol 2>&1 \
        && echo "      Running $sample_prog$args...\n"

    if [ "`diff mine sol`" = "" ]; then
        let passedCount++
    fi

    IFS=$'\n'

done < $input


# Compare output files
echo $passedCount/$count tests passed.
echo "Would you like to see the diff file? [y/n]"
read continueKey
if [ "${continueKey}" = "y" ]; then
vimdiff mine sol
fi
