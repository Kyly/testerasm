#!/bin/bash
hw=${PWD##*/}
parent=${PWD%/*/*} # TODO not sure why I ha to add this opposed to using ~ 
                   # instead but it works.

writeusage () {
    echo
    echo "tester - UCSD CSE30"
    echo "Makes and tests your program simultaneously with the sample program."
    echo "The differences in stdout/stderr are shown in a vimdiff."
    echo
#echo "Usage: tester [program] [solution program] [test input | --no-input]"
    echo "Usage: tester [program] [solution program] [args]"
    echo
    echo "Be sure to run this in a \"hw#\" directory."
    echo
}

# This checks if the user would like to continue adding to an existing
# solution file. TODO We may want to make this a command line instruction.
echo
echo "Would you like to append to solution files? [y/n] "
read rmSolfiles

# This is the command to read from terminal --> read rmdatafiles

# If the user doesn't know how to use this
# TODO We may need to change the number of arguments
if [[ "$#" < 2 ]]; then
    writeusage
    exit 1
fi


# First arg is the driver
driver="$1"
my_prog="./$driver"
shift

# Second arg is solution driver name
soldriver="$1"
sample_prog="$parent/public/$soldriver"
shift

# Second arg is the input (or lack thereof)
# if [[ "$1" != "--no-input" ]]; then
#     src="cat $PWD/$1" # This opens the file
# fi
# shift

# The rest of the arguments are passed to the driver
# This needs to be 
while [[ "$#" > 0 ]]; do
     args="$args $1"
     shift
done

# Make your file
# This makes the default target
make

# Remove and recreates apropriate files
if [ "${rmSolfiles,,}" != "y" ]; then
    rm -f mine sol
fi

echo "Attepting to run loacal driver..."
# Create output file taking in stderr & stdout
# This is is what we should probably run in a loop
$my_prog$args >> mine 2>&1 && echo "Running $my_prog$args..."


echo "Attempting to run solution..."
# Save solution output
$sample_prog$args >> sol 2>&1 && echo "Running $sample_prog$args..."

# Compare output files
vimdiff mine sol
